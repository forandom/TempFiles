1. arena is a chunk of memory
memory_: start of the chunk
size_: size of the chunk
bytes_allocated_:

constructor:
implementation with anonyous mmap or calloc
it says calloc is a little more efficient
// Memmap is a bit slower than malloc according to my measurements.

desctructor:
delete memory_

Reset():
zero the first bytes_allocated_ bytes.

2. arena pool is a list of free arenas

AllocArena(size_t size):
firt check whether the *first free* arena is larger than the size. If that's true,
return the first free arena, else create a new arena and return. 
ArenaPool will clear the used bytes in a arena before return it. Call
Arena::Reset()

destructor:
delete all arenas

FreeArenaChain(Arena* first)
add arena list pointed by first into free list.

an arena pool may be shared by several allocators. MutexLock is used to prevent
races.

3. ArenaAllocator holds Arenas allocated from ArenaPool. Before ArenaAllocator's ending
of scope, all holding Arenas will be released to ArenaPool. That's the only
point ArenaAllocator releases memory. 
ArenaAllocator has low recycle frequence.

Alloc(size_t bytes, ArenaAllocKind kind)
kind is used for statistic.
bytes will be Round up to 8 bytes aligned.
 
4. To improve the recycle frequency. ScopedArenaAllocator and ArenaStack designed.
ArenaStack holds list of Arenas allocated from ArenaPool.

StatsAndPool stats_and_pool_;
Arena* bottom_arena_;
Arena* top_arena_;
uint8_t* top_ptr_;
uint8_t* top_end_;

ArenaStack(ArenaPool* arena_pool) {
top_arena_
        top_ptr_
        top_end_
bottom_arena_
stats_and_pool_(arena_pool)
}

~ArenaStack()
realese the arena list start from bottom_arena_ into ArenaPool

Alloc()
AroundUp
first try to allocate from top arena
if failed call AllocateFromNextArena(rounded_bytes)

Reset()
like ~ArenaStack()
realese the arena list start from bottom_arena_ into ArenaPool
nullify all pointer

AllocateFromNextArena(size_t rounded_bytes)
arenas above top_arena_ are all free
allocate start from top_arena_->next 
if failed, allocate from ArenaPool
insert the new Arena right after top_arena_
the new Arena become the top_arena_

5. ScopedArenaAllocator

request memory from ArenaStack
mark the start point in the ArenaStack:

  Arena* mark_arena_;   // the start arena
  uint8_t* mark_ptr_;   // the start point in start arena
  uint8_t* mark_end_;   // the end of the start arena

the ArenaAllocator itself is also allocated on the ArenaStack, right starting
from mark_ptr_

  void* Alloc(size_t bytes, ArenaAllocKind kind) ALWAYS_INLINE {
ask memory from arena_stack_

ScopedArenaAllocator::~ScopedArenaAllocator() {
call Reset();

void ScopedArenaAllocator::Reset()
reset arena_stack's top to mark_arena_

NOTE:
ArenaStack and ScopedArenaAllocator are used by a single thread
when life cycle ends, arenas in ArenaStack after the markpoint become 
allocatable, can be used by AllocateFromNextArena for next
ScoppedArenaAllocator
memory allocated by ScoppedArenaAllocator are not zeroed out

reduce MutexLock overhead 

ArenaStack has same life cycle as a compiling thread
ScopedArenaAllocator has same life cycle as it's scope, like a method or a pass 

6. statistic information
